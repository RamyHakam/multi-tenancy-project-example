<?phpnamespace App\Entity\Main;use App\Repository\Main\TenantUserRepository;use Doctrine\ORM\Mapping as ORM;use Symfony\Component\Security\Core\User\UserInterface;#[ORM\Entity(repositoryClass: TenantUserRepository::class)]class TenantUser implements UserInterface{    #[ORM\Id]    #[ORM\GeneratedValue]    #[ORM\Column(type: 'integer')]    private $id;    #[ORM\Column(type: 'string', length: 180, unique: true)]    private ?string $email;    #[ORM\Column(type: 'json')]    private array $roles = [];    #[ORM\Column(type: 'string')]    private string $password;    #[ORM\ManyToOne(targetEntity: TenantDbConfig::class,cascade: ['persist'])]    private TenantDbConfig $tenantDbConfig;    public function getId(): ?int    {        return $this->id;    }    public function getEmail(): ?string    {        return $this->email;    }    public function setEmail(string $email): self    {        $this->email = $email;        return $this;    }    /**     * The public representation of the user (e.g. a username, an email address, etc.)     *     * @see UserInterface     */    public function getUserIdentifier(): string    {        return (string) $this->email;    }    /**     * @see UserInterface     */    public function getRoles(): array    {        $roles = $this->roles;        // guarantee every user at least has ROLE_USER        $roles[] = 'ROLE_USER';        return array_unique($roles);    }    public function setRoles(array $roles): self    {        $this->roles = $roles;        return $this;    }    /**     * @see PasswordAuthenticatedUserInterface     */    public function getPassword(): string    {        return $this->password;    }    public function setPassword(string $password): self    {        $this->password = $password;        return $this;    }    /**     * Returning a salt is only needed if you are not using a modern     * hashing algorithm (e.g. bcrypt or sodium) in your security.yaml.     *     * @see UserInterface     */    public function getSalt(): ?string    {        return null;    }    /**     * @see UserInterface     */    public function eraseCredentials()    {        // If you store any temporary, sensitive data on the user, clear it here        // $this->plainPassword = null;    }    /**     * @return TenantDbConfig     */    public function getTenantDbConfig(): TenantDbConfig    {        return $this->tenantDbConfig;    }    /**     * @param TenantDbConfig $tenantDbConfig     */    public function setTenantDbConfig(TenantDbConfig $tenantDbConfig): void    {        $this->tenantDbConfig = $tenantDbConfig;    }}